from twine_theory.domain import twine_theory as twine
##     15
##   14 |14
## 13 | | |13
##  | | | | |
##  | |13 | |
##  |12  12 |11 
## 11      11 |  
##            |  
##            | 9
##            9 |
##              |
##              | 7
##              7 |
##                |
##                5
def test_strokes_spliting_1():
    ks = [
            ('2018/1/2',11,13,13,11,100)
            ,('2018/1/3',12,14,14,12,100)
            ,('2018/1/4',13,15,15,13,100)
            , ('2018/1/5', 12, 14, 14, 12, 100)
            , ('2018/1/6', 11, 13, 13,11, 100)
            , ('2018/1/7', 9, 11, 11, 9, 100)
            , ('2018/1/8', 7, 9, 9, 7, 100)
            , ('2018/1/8', 5, 7, 7, 5, 100)
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 1
    assert ks._strokes[0].to_dict() == {'from':(2,15),
                        'to':(7,5),
                        'isUp':False,
                        'growing':True
                        }
##      
##       15
##     14| 14
##  13 | | |
##   | | | | 13
##   | | 13| |
##   | 12  12|
##  11       |11 
##           11|
##             |
##             |
##             9    
def test_strokes_spliting_2():
    ks = [
            ('2018/1/2',11,13,13,11,100)
            ,('2018/1/3',12,14,14,12,100)
            ,('2018/1/4',13,15,15,13,100)
            , ('2018/1/5', 12, 14, 14, 12, 100)
            , ('2018/1/6', 11, 13, 13,11, 100)
            , ('2018/1/7', 9, 11, 11, 9, 100)
        ]

    s = twine.KSeq('day',ks)
    assert len(s._strokes) == 0


def test_strokes_spliting_4():
    ks = [
        ("2017-01-03",9.11,9.18,9.16,9.09,459840.47),
        ("2017-01-04",9.15,9.18,9.16,9.14,449329.53),
        ("2017-01-05",9.17,9.18,9.17,9.15,344372.91),
        ("2017-01-06",9.17,9.17,9.13,9.11,358154.19),
        ("2017-01-09",9.13,9.17,9.15,9.11,361081.56),
        ("2017-01-10",9.15,9.16,9.15,9.14,241053.95),
        ("2017-01-11",9.14,9.17,9.14,9.13,303430.88),
        ("2017-01-12",9.13,9.17,9.15,9.13,428006.75),
        ("2017-01-13",9.14,9.19,9.16,9.12,434301.38),
        ("2017-01-16",9.15,9.16,9.14,9.07,683165.81),
        ("2017-01-17",9.12,9.16,9.15,9.1,545552.38),
        ("2017-01-18",9.14,9.19,9.17,9.13,574269.38),
        ("2017-01-19",9.15,9.24,9.18,9.15,437712.88),
        ("2017-01-20",9.17,9.23,9.22,9.17,393328.56),
        ("2017-01-23",9.22,9.26,9.22,9.2,420299.31),
        ("2017-01-24",9.23,9.28,9.27,9.2,470244.09),
        ("2017-01-25",9.27,9.28,9.26,9.25,304401.97),
        ("2017-01-26",9.27,9.34,9.33,9.26,420712.56)
         ]
         
    s = twine.KSeq('day',ks)
    assert len(s._strokes) == 1

##     15
##   14 |14
## 13 | | |13
##  | | | | |
##  | |13 | |
##  |12  12 |11 
## 11      11 |  
##            |  
##            | 9
##            9 |
##              |
##              | 7 |
##              7 | |
##                |
##                5
def test_strokes_spliting_5():
    ks = [
            ('2018/1/2',11,13,13,11,100)
            ,('2018/1/3',12,14,14,12,100)
            ,('2018/1/4',13,15,15,13,100)
            , ('2018/1/5', 12, 14, 14, 12, 100)
            , ('2018/1/6', 11, 13, 13,11, 100)
            , ('2018/1/7', 9, 11, 11, 9, 100)
            , ('2018/1/8', 7, 9, 9, 7, 100)
            , ('2018/1/9', 5, 7, 7, 5, 100)
            , ('2018/1/10', 6, 8, 8, 6, 100)
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 1
    assert ks._strokes[0].to_dict() == {'from':(2,15),
                        'to':(7,5),
                        'isUp':False,
                        'growing':True
                        }

##     15
##   14 |14
## 13 | | |13
##  | | | | |
##  | |13 | |
##  |12  12 |11 
## 11      11 |  
##            |  
##            | 9
##            9 |
##              |     |
##              | 7 | | 
##              7 | |   |  
##                |     |
##                5     |
##                      4    
def test_strokes_spliting_6():
    ks = [
            ('2018/1/2',11,13,13,11,100)
            ,('2018/1/3',12,14,14,12,100)
            ,('2018/1/4',13,15,15,13,100)
            , ('2018/1/5', 12, 14, 14, 12, 100)
            , ('2018/1/6', 11, 13, 13,11, 100)
            , ('2018/1/7', 9, 11, 11, 9, 100)
            , ('2018/1/8', 7, 9, 9, 7, 100)
            , ('2018/1/9', 5, 7, 7, 5, 100)
            , ('2018/1/10', 6, 8, 8, 6, 100)
            , ('2018/1/11', 7, 9, 9, 7, 100)
            , ('2018/1/12', 7, 4, 7, 4, 100)
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 1
    assert ks._strokes[0].to_dict() == {'from':(2,15),
                        'to':(10,4),
                        'isUp':False,
                        'growing':True
                        }


##15      |
##14    | | |
##13  | |   | |
##12  |       |
##11            |           |
##10            |         | |
##09              |     | |
##08              |   | |
##07                | |
##06                | 
##05  0 1 2 3 4 5 6 7 8 9 a b
##04            
##03            
##02            
##01            
##08            
def test_strokes_spliting_7():
    ks = [
            ('2018/1/1',11,13,13,11,100)
            ,('2018/1/2',12,14,14,12,100)
            ,('2018/1/3',13,15,15,13,100)
            , ('2018/1/4', 12, 14, 14, 12, 100)
            , ('2018/1/5', 11, 13, 13,11, 100)
            , ('2018/1/6', 9, 11, 11, 9, 100)
            , ('2018/1/7', 7, 9, 9, 7, 100)
            , ('2018/1/8', 5, 7, 7, 5, 100)
            , ('2018/1/9', 6, 8, 8, 6, 100)
            , ('2018/1/10', 7, 9, 9, 7, 100)
            , ('2018/1/11', 8, 10, 10, 8, 100)
            , ('2018/1/12', 9, 11, 11, 9, 100)
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 2
    assert ks._strokes[0].to_dict() == {'from':(2,15),
                        'to':(7,5),
                        'isUp':False,
                        'growing':False
                        }
    assert ks._strokes[1].to_dict() =={
                        'from':(7,5),
                        'to':(11,11),
                        'isUp':True,
                        'growing':True
                        }

##15      |
##14    | | |
##13  | |   | |
##12  |       |
##11            |           |
##10            |         | | 
##09              |     | |   |
##08              |   | |     |
##07                | |       | 
##06                |         |
##05                          |
##04  0 1 2 3 4 5 6 7 8 9 a b c            
##03            
##02            
##01            
##08            
def test_strokes_spliting_8():
    ks = [
            ('2018/1/1',11,13,13,11,100)
            ,('2018/1/2',12,14,14,12,100)
            ,('2018/1/3',13,15,15,13,100)
            , ('2018/1/4', 12, 14, 14, 12, 100)
            , ('2018/1/5', 11, 13, 13,11, 100)
            , ('2018/1/6', 9, 11, 11, 9, 100)
            , ('2018/1/7', 7, 9, 9, 7, 100)
            , ('2018/1/8', 5, 7, 7, 5, 100)
            , ('2018/1/9', 6, 8, 8, 6, 100)
            , ('2018/1/10', 7, 9, 9, 7, 100)
            , ('2018/1/11', 8, 10, 10, 8, 100)
            , ('2018/1/12', 9, 11, 11, 9, 100)
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 2
    assert ks._strokes[0].to_dict() == {'from':(2,15),
                        'to':(7,5),
                        'isUp':False,
                        'growing':False
                        }
    assert ks._strokes[1].to_dict() =={
                        'from':(7,5),
                        'to':(11,11),
                        'isUp':True,
                        'growing':True
                        }
    
##15      |
##14    | | |
##13  | |   | |
##12  |       |
##11            |           |
##10            |         | |   |
##09              |     | |   | | |
##08              |   | |     |   |
##07                | |       |     |
##06                |         |     | |
##05                          |       |
##04                                  |
##03  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6          
##02            
##01            
           
def test_strokes_spliting_9():
    ks = [
            ('2018/1/1',11,13,13,11,100)
            ,('2018/1/2',12,14,14,12,100)
            ,('2018/1/3',13,15,15,13,100)
            , ('2018/1/4', 12, 14, 14, 12, 100)
            , ('2018/1/5', 11, 13, 13,11, 100)
            , ('2018/1/6', 9, 11, 11, 9, 100)
            , ('2018/1/7', 7, 9, 9, 7, 100)
            , ('2018/1/8', 5, 7, 7, 5, 100)
            , ('2018/1/9', 6, 8, 8, 6, 100)
            , ('2018/1/10', 7, 9, 9, 7, 100)
            , ('2018/1/11', 8, 10, 10, 8, 100)
            , ('2018/1/12', 9, 11, 11, 9, 100)
            , ('2018/1/13', 9, 4, 9, 4, 100)
            , ('2018/1/14', 10, 8, 10, 8, 100)
            , ('2018/1/15', 9, 7, 9, 7, 100)
            , ('2018/1/16', 7, 5, 7, 5, 100)
            , ('2018/1/17', 6, 3, 6, 3, 100)
            
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 3
    assert ks._strokes[0].to_dict() == {'from':(2,15),
                        'to':(7,5),
                        'isUp':False,
                        'growing':False
                        }
    assert ks._strokes[1].to_dict() =={
                        'from':(7,5),
                        'to':(11,11),
                        'isUp':True,
                        'growing':False
                        }
    assert ks._strokes[2].to_dict() =={
                        'from':(11,11),
                        'to':(16,3),
                        'isUp':False,
                        'growing':True
                        }

##15      |
##14    | | |
##13  | |   | |
##12  |       |                       |
##11            |           |         |
##10            |         | |   |   | |
##09              |     | |   | | | |
##08              |   | |     |   |
##07                | |       
##06                |         
##05                          
##04                          
##03  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6          
##02            
##01            
           
def test_strokes_spliting_10():
    ks = [  #date,open,high,close,low,volume
            ('2018/1/1',11,13,13,11,100)
            ,('2018/1/2',12,14,14,12,100)
            ,('2018/1/3',13,15,15,13,100)
            , ('2018/1/4', 12, 14, 14, 12, 100)
            , ('2018/1/5', 11, 13, 13,11, 100)
            , ('2018/1/6', 9, 11, 11, 9, 100)
            , ('2018/1/7', 7, 9, 9, 7, 100)
            , ('2018/1/8', 5, 7, 7, 5, 100)
            , ('2018/1/9', 6, 8, 8, 6, 100)
            , ('2018/1/10', 7, 9, 9, 7, 100)
            , ('2018/1/11', 8, 10, 10, 8, 100)
            , ('2018/1/12', 9, 11, 11, 9, 100)            
            , ('2018/1/13', 7, 9, 9, 7, 100)
            , ('2018/1/14', 8, 10, 10, 8, 100)
            , ('2018/1/15', 7, 9, 9, 7, 100)
            , ('2018/1/16', 8, 10, 10, 8, 100)
            , ('2018/1/17', 9, 12, 12, 9, 100)          
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 2
    assert ks._strokes[0].to_dict() == {'from':(2,15),
                        'to':(7,5),
                        'isUp':False,
                        'growing':False
                        }
    assert ks._strokes[1].to_dict() =={
                        'from':(7,5),
                        'to':(16,12),
                        'isUp':True,
                        'growing':True
                        }

##15  
##14  
##13  
##12  
##11                        |
##10                        |               |
##09          |           | | |           | | |
##08        | | |         |   | |       | |   |
##07      | |   | |     | |     | |   | |
##06    | |       | |   |         | | |
##05  | |           | | |           | 
##04  |               |
##03  |  
##02  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0      
##01            
##00 
def test_strokes_spliting_11():
    ks = [  #date,open,high,close,low,volume
            ('2018/1/1',2,5,5,2,100)
            ,('2018/1/2',4,6,6,4,100)
            ,('2018/1/3',5,7,7,5,100)
            , ('2018/1/4', 6, 8, 8, 6, 100)
            , ('2018/1/5', 7, 9, 9,7, 100)
            , ('2018/1/6', 6, 8, 8, 6, 100)
            , ('2018/1/7', 5, 7, 7, 5, 100)
            , ('2018/1/8', 4, 6, 6, 4, 100)
            , ('2018/1/9', 3, 5, 5, 3, 100)
            , ('2018/1/10', 4, 7, 7, 4, 100)
            , ('2018/1/11', 6, 9, 9, 6, 100)
            , ('2018/1/12', 8, 11, 11, 8, 100)
            , ('2018/1/13', 7, 9, 9, 7, 100)
            , ('2018/1/14', 6, 8, 8, 6, 100)
            , ('2018/1/15', 5, 7, 7, 5, 100)           
            , ('2018/1/16', 4, 6, 6, 4, 100)
            
            , ('2018/1/17', 5, 7, 7, 5, 100)
            , ('2018/1/18', 6, 8, 8, 6, 100)
            , ('2018/1/19', 7, 9, 9, 7, 100)
            , ('2018/1/20', 8, 10, 10, 8, 100)
            
            , ('2018/1/21', 7, 9, 9, 7, 100)
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 2
    assert ks._strokes[0].to_dict() == {'from':(0,2),
                        'to':(4,9),
                        'isUp':True,
                        'growing':False
                        }
    assert ks._strokes[1].to_dict() =={
                        'from':(4,9),
                        'to':(8,3),
                        'isUp':False,
                        'growing':True
                        }

##15      |
##14    | | |
##13  | |   | |
##12  |       |                 
##11            |           |   
##10            |           |   
##09              |     |   | 
##08              |   | | | | |
##07                | |   |   | | 
##06                |     |     | |   |
##05                      |       | | |
##04                                |
##03  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6          
##02            
##01       
def test_strokes_spliting_12():
    ks = [  #date,open,high,close,low,volume
            ('2018/1/1',11,13,13,11,100)
            ,('2018/1/2',12,14,14,12,100)
            ,('2018/1/3',13,15,15,13,100)##top
            , ('2018/1/4',12,14,14,12, 100)
            , ('2018/1/5',11,13,13,11, 100)
            , ('2018/1/6', 9,11,11, 9, 100)
            , ('2018/1/7', 7, 9, 9, 7, 100)
            , ('2018/1/8', 5, 7, 7, 5, 100)#
            , ('2018/1/9', 6, 8, 8, 6, 100)
            , ('2018/1/10', 7, 9, 9, 7, 100)##
            , ('2018/1/11', 4, 8, 8, 4, 100)#
            , ('2018/1/12', 7, 11, 11, 7, 100)##
            , ('2018/1/13', 6, 8, 8, 6, 100)
            , ('2018/1/14', 5, 7, 7, 5, 100)
            , ('2018/1/15', 4, 6, 6, 4, 100)           
            , ('2018/1/16', 3, 5, 5, 3, 100)#
            , ('2018/1/17', 4, 6, 6, 4, 100)
        ]

    ks = twine.KSeq('day',ks)
    assert len(ks._strokes) == 1

    assert ks._strokes[0].to_dict() =={
                        'from':(2,15),
                        'to':(15,3),
                        'isUp':False,
                        'growing':True
                        }
